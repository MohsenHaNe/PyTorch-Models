# -*- coding: utf-8 -*-
"""PyTorch - Fashionmnist

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nrScu0MK_MAUdVFxE8zbwumIi8iFacI2
"""

import torch
from torch import nn as nn
from torch.nn import Module
from torchvision import datasets, transforms
import matplotlib.pyplot as plt
from torch.nn import functional as F
import torch.optim as opt
from torch.utils.data import DataLoader

train_dataset = datasets.FashionMNIST(
    root='./data',
    train=True,
    download=True,
    transform=transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))
    ]))

test_dataset = datasets.FashionMNIST(
    root='./data',
    train=False,
    download=True,
    transform=transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))
    ]))

batchs_size =32
train_loader = DataLoader(train_dataset, batch_size=batchs_size, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=batchs_size, shuffle=False)

class nn_model(Module):
    def __init__(self):
        super().__init__()
        self.cl1 = nn.Conv2d(1, 32, 3, 1)
        self.cl2 = nn.Conv2d(32, 64, 3, 1)
        self.fc1 = nn.Linear(9216, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = self.cl1(x)
        x = F.relu(x)
        x = self.cl2(x)
        x = F.max_pool2d(x, 2, 2)
        x = torch.flatten(x, 1)
        x = self.fc1(x)
        x = F.relu(x)
        x = self.fc2(x)
        return x

model = nn_model()

lr=0.001
optimizer = opt.Adam(model.parameters(), lr=lr)
epochs = 10

for epoch in range(epochs):
    for batch_idx, (data, target) in enumerate(train_loader):
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()

        if batch_idx % 100 == 0:
            print('Epoch: {}, Batch: {}, Loss: {}'.format(
                epoch, batch_idx, loss.item()))

with torch.no_grad():
    correct = 0
    for data, target in test_loader:
        output = model(data)
        pred = output.argmax(dim=1, keepdim=True)
        correct += pred.eq(target.view_as(pred)).sum().item()
    print('acc: {}/{}'.format(correct, len(test_dataset)))

torch.save(model.state_dict(), 'fashionmnist_model.ckpt')